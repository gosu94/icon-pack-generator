services:
  postgres:
    image: postgres:15-alpine
    container_name: icon-pack-postgres
    environment:
      - POSTGRES_DB=icon_pack_generator
      - POSTGRES_USER=${POSTGRES_USER:-iconpack}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-iconpack123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-iconpack} -d icon_pack_generator"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  icon-pack-generator:
    build: .
    ports:
      - "8060:8080"
    depends_on:
      postgres:
        condition: service_healthy
    # The `env_file` directive is the standard way to load all variables from your .env file.
    env_file:
      - .env
    # You can also define variables explicitly using the `environment` key.
    # This is useful for clarity or for overriding values from the env_file.
    # The `${FAL_KEY}` syntax tells Docker Compose to find the value from your
    # shell or the .env file and substitute it here.
    environment:
     # API Keys
     - FAL_KEY=${FAL_KEY}
     - OPENAI_API_KEY=${OPENAI_API_KEY}
     
     # Database Configuration
     - POSTGRES_USER=${POSTGRES_USER:-iconpack}
     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-iconpack123}
     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/icon_pack_generator
     
     # Application Configuration
     - APP_BASE_URL=${APP_BASE_URL:-https://iconpackgen.com}
     - FILE_STORAGE_PATH=/app/data/user-icons
     - STATIC_LOCATIONS=${STATIC_LOCATIONS:-classpath:/static/}
     
     # Google OAuth
     - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
     - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
     
     # Stripe Configuration
     - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
     - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
     - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
     - STRIPE_STARTER_PACK_PRODUCT_ID=${STRIPE_STARTER_PACK_PRODUCT_ID:-prod_T46XgiMnbA3uMF}
     - STRIPE_STARTER_PACK_PRICE_ID=${STRIPE_STARTER_PACK_PRICE_ID:-price_1S7yKeG7H7nvLRCSbS3XAqO9}
     - STRIPE_CREATOR_PACK_PRODUCT_ID=${STRIPE_CREATOR_PACK_PRODUCT_ID:-prod_T46ZOSQZOhjxq6}
     - STRIPE_CREATOR_PACK_PRICE_ID=${STRIPE_CREATOR_PACK_PRICE_ID:-price_1S7yMgG7H7nvLRCSvXEf20Ub}
     - STRIPE_PRO_PACK_PRODUCT_ID=${STRIPE_PRO_PACK_PRODUCT_ID:-pro_pack_product_id}
     - STRIPE_PRO_PACK_PRICE_ID=${STRIPE_PRO_PACK_PRICE_ID:-pro_pack_price_id}
     
     # AWS SES Configuration
     - AWS_SES_REGION=${AWS_SES_REGION:-us-east-1}
     - AWS_SES_FROM_EMAIL=${AWS_SES_FROM_EMAIL:-noreply@yourdomain.com}
     
     # Signal Bot Configuration (optional)
     - CALLMEBOT_ENABLED=${CALLMEBOT_ENABLED:-false}
     - PHONE_NUMBER=${PHONE_NUMBER:-}
     - CALLMEBOT_API_KEY=${CALLMEBOT_API_KEY:-}
    volumes:
      - ./static/user-icons:/app/data/user-icons
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data: